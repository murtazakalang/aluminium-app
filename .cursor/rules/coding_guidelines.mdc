---
description: 
globs: 
alwaysApply: true
---
# Important Rules AI Must Follow:

1.  **Code Structure:**
    *   Keep backend and frontend folders cleanly separated.
    *   Follow MVC (Model View Controller) architecture on backend.

2.  **Naming Conventions:**
    *   Use clear, meaningful variable and function names.
    *   Always use camelCase for variables and snake_case for database fields.

3.  **Error Handling:**
    *   Proper try/catch blocks for all async functions.
    *   Proper HTTP status codes (200, 400, 401, 404, 500).

4.  **API Design:**
    *   RESTful APIs: Separate routes for GET, POST, PUT, DELETE.
    *   Use pagination for listing endpoints.

5.  **Frontend Rules:**
    *   Responsive mobile-first design (TailwindCSS preferred if styling needed).
    *   Consistent UI components across pages.

6.  **Database Rules:**
    *   Use Mongoose schema validations.
    *   Index fields that are searched frequently (like client name, window code).

7.  **Subscription and Billing:**
    *   Protect subscription-only routes (middleware authentication).
    *   Alert users before subscription expiry.

8.  **Code Quality:**
    *   DRY (Don't Repeat Yourself) principle.
    *   Modular, reusable code wherever possible.

9.  **Progress Tracking:**
    *   After completing each phase, mark it "done" before starting the next.

10. **Documentation:**
    *   Every model, route, and major function should have a short comment explaining it.

11. **Backend Middleware & Route Protection:**
    *   Always import `protect` from `../controllers/authController` (never from middleware files).
    *   Always import `rbac` from `../middleware/rbac` for role-based access control.
    *   Apply `router.use(protect)` to protect all routes in a router.
    *   Use `rbac(['Admin', 'Manager', 'Staff'])` to specify allowed roles per route.
    *   Controllers must use `req.user.companyId` for multi-tenancy (set by protect middleware).
    *   Remove middleware-related code from controllers - rely on middleware to set context.
    *   Follow roles hierarchy: Staff (limited) → Manager (broader) → Admin (full access).
    *   Never create separate `authMiddleware.js` - always use `authController.protect`.
    *   Consistency is key in middleware implementation across all modules.
