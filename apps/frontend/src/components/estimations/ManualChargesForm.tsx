import React, { useState, useEffect } from 'react';
import { ManualCharge } from '@/lib/api/estimationService';

interface ManualChargesFormProps {
  charges: ManualCharge[];
  onChange: (charges: ManualCharge[]) => void;
  readOnly?: boolean;
}

const ManualChargesForm: React.FC<ManualChargesFormProps> = ({ 
  charges, 
  onChange,
  readOnly = false
}) => {
  const [localCharges, setLocalCharges] = useState<ManualCharge[]>(charges || []);
  const [newCharge, setNewCharge] = useState<ManualCharge>({ description: '', amount: '0' });

  useEffect(() => {
    setLocalCharges(charges || []);
  }, [charges]);

  const handleAddCharge = () => {
    if (!newCharge.description || parseFloat(newCharge.amount) <= 0) {
      return;
    }
    
    const updatedCharges = [...localCharges, newCharge];
    setLocalCharges(updatedCharges);
    setNewCharge({ description: '', amount: '0' });
    onChange(updatedCharges);
  };

  const handleRemoveCharge = (index: number) => {
    const charge = localCharges[index];
    // Prevent removal of auto-generated labour charges
    if (charge.isLabourCharge && charge.autoGenerated) {
      alert('Auto-generated labour charges cannot be removed. You can modify the amount or edit the product type settings instead.');
      return;
    }
    
    const updatedCharges = localCharges.filter((_, i) => i !== index);
    setLocalCharges(updatedCharges);
    onChange(updatedCharges);
  };

  const handleChargeChange = (index: number, field: keyof ManualCharge, value: string | number | boolean) => {
    const updatedCharges = localCharges.map((charge, i) => 
      i === index 
        ? { 
            ...charge, 
            [field]: value,
            // Mark labour charges as manually modified if amount is changed
            ...(field === 'amount' && charge.isLabourCharge ? { manuallyModified: true } : {})
          } 
        : charge
    );
    setLocalCharges(updatedCharges);
    onChange(updatedCharges);
  };

  return (
    <div className="bg-white p-4 rounded-md shadow">
      <h3 className="text-lg font-medium mb-4">Manual Charges</h3>
      
      {localCharges.length === 0 && (
        <p className="text-gray-500 italic mb-4">No manual charges added yet.</p>
      )}
      
      {localCharges.length > 0 && (
        <div className="mb-4">
          <div className="grid grid-cols-12 gap-4 font-medium text-sm text-gray-500 mb-2">
            <div className="col-span-7">Description</div>
            <div className="col-span-3">Amount</div>
            <div className="col-span-2"></div>
          </div>
          
          {localCharges.map((charge, index) => (
            <div key={index} className={`grid grid-cols-12 gap-4 mb-2 ${charge.isLabourCharge ? 'bg-blue-50 p-2 rounded-md' : ''}`}>
              <div className="col-span-7">
                {readOnly ? (
                  <div className="py-2">
                    <div className="font-medium">{charge.description}</div>
                    {charge.isLabourCharge && charge.rateDescription && (
                      <div className="text-xs text-gray-500 mt-1">
                        {charge.rateDescription}
                        {charge.manuallyModified && <span className="text-blue-600 ml-2">(Modified)</span>}
                        {charge.autoGenerated && !charge.manuallyModified && <span className="text-green-600 ml-2">(Auto)</span>}
                      </div>
                    )}
                  </div>
                ) : (
                  <div>
                    <input
                      type="text"
                      value={charge.description}
                      onChange={(e) => handleChargeChange(index, 'description', e.target.value)}
                      className={`focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2 sm:text-sm border-gray-300 rounded-md ${charge.isLabourCharge && charge.autoGenerated ? 'bg-gray-100' : ''}`}
                      placeholder="Charge description"
                      disabled={charge.isLabourCharge && charge.autoGenerated}
                    />
                    {charge.isLabourCharge && charge.rateDescription && (
                      <div className="text-xs text-gray-500 mt-1">
                        {charge.rateDescription}
                        {charge.manuallyModified && <span className="text-blue-600 ml-2">(Modified)</span>}
                        {charge.autoGenerated && !charge.manuallyModified && <span className="text-green-600 ml-2">(Auto)</span>}
                      </div>
                    )}
                  </div>
                )}
              </div>
              <div className="col-span-3">
                {readOnly ? (
                  <div className="py-2">â‚¹{parseFloat(charge.amount).toFixed(2)}</div>
                ) : (
                  <input
                    type="number"
                    min="0"
                    step="0.01"
                    value={parseFloat(charge.amount).toFixed(2)}
                    onChange={(e) => handleChargeChange(index, 'amount', e.target.value)}
                    className="focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2 sm:text-sm border-gray-300 rounded-md"
                    placeholder="Amount"
                  />
                )}
              </div>
              <div className="col-span-2">
                {!readOnly && (
                  <button
                    type="button"
                    onClick={() => handleRemoveCharge(index)}
                    className={`inline-flex items-center p-2 border border-transparent text-sm font-medium rounded-md ${
                      charge.isLabourCharge && charge.autoGenerated 
                        ? 'text-gray-400 bg-gray-100 cursor-not-allowed' 
                        : 'text-red-700 bg-red-100 hover:bg-red-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500'
                    }`}
                    disabled={charge.isLabourCharge && charge.autoGenerated}
                    title={charge.isLabourCharge && charge.autoGenerated ? 'Auto-generated labour charges cannot be removed' : 'Remove charge'}
                  >
                    Remove
                  </button>
                )}
              </div>
            </div>
          ))}
        </div>
      )}
      
      {!readOnly && (
        <div className="grid grid-cols-12 gap-4">
          <div className="col-span-7">
            <input
              type="text"
              value={newCharge.description}
              onChange={(e) => setNewCharge({ ...newCharge, description: e.target.value })}
              className="focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2 sm:text-sm border-gray-300 rounded-md"
              placeholder="New charge description"
            />
          </div>
          <div className="col-span-3">
            <input
              type="number"
              min="0"
              step="0.01"
              value={parseFloat(newCharge.amount).toFixed(2)}
              onChange={(e) => setNewCharge({ ...newCharge, amount: e.target.value })}
              className="focus:ring-indigo-500 focus:border-indigo-500 block w-full p-2 sm:text-sm border-gray-300 rounded-md"
              placeholder="Amount"
            />
          </div>
          <div className="col-span-2">
            <button
              type="button"
              onClick={handleAddCharge}
              className="inline-flex items-center p-2 border border-transparent text-sm font-medium rounded-md text-green-700 bg-green-100 hover:bg-green-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
            >
              Add
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default ManualChargesForm; 