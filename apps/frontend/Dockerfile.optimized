# Dockerfile for Frontend (Next.js)

# --- Dependencies Stage (Optimized for caching) ---
    FROM node:18-alpine AS deps

    # Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
    RUN apk add --no-cache libc6-compat
    
    WORKDIR /usr/src/app
    
    # Copy package files in optimal order for caching
    COPY package*.json ./
    COPY apps/frontend/package*.json ./apps/frontend/
    
    # Install only production dependencies first
    RUN npm ci --only=production && npm cache clean --force
    
    # --- Development Dependencies Stage ---
    FROM deps AS dev-deps
    
    # Install dev dependencies separately
    RUN npm ci --include=dev && npm cache clean --force
    
    # --- Development Stage ---
    FROM node:18-alpine AS development
    
    RUN apk add --no-cache libc6-compat
    
    ENV NODE_ENV=development 
    WORKDIR /usr/src/app
    
    # Copy only the frontend-specific dependencies from deps stage
    COPY --from=dev-deps /usr/src/app/node_modules ./node_modules/
    COPY --from=dev-deps /usr/src/app/apps/frontend/node_modules ./apps/frontend/node_modules/
    
    # Copy package files
    COPY package*.json ./
    COPY apps/frontend/package*.json ./apps/frontend/
    
    # Copy source code for frontend
    COPY apps/frontend/ ./apps/frontend/
    # Copy packages if they exist (but only what's needed)
    COPY packages/ ./packages/
    
    # Set working directory to frontend
    WORKDIR /usr/src/app/apps/frontend
    
    # Expose port
    EXPOSE 3000
    
    # Run development server
    CMD ["npm", "run", "dev"]
    
    # --- Builder Stage (For Production) ---
    FROM node:18-alpine AS builder
    
    WORKDIR /usr/src/app 
    
    # Copy dependencies from deps stage (production only)
    COPY --from=deps /usr/src/app/node_modules ./node_modules/
    COPY --from=deps /usr/src/app/apps/frontend/node_modules ./apps/frontend/node_modules/
    
    # Copy package files
    COPY package*.json ./
    COPY apps/frontend/package*.json ./apps/frontend/
    
    # Copy source files
    COPY apps/frontend/ ./apps/frontend/
    COPY packages/ ./packages/
    
    # Build the frontend app
    WORKDIR /usr/src/app/apps/frontend
    RUN npm run build
    
    # --- Production Runner Stage ---
    FROM node:18-alpine AS runner
    
    WORKDIR /usr/src/app
    
    ENV NODE_ENV=production
    # Disable telemetry for better performance
    ENV NEXT_TELEMETRY_DISABLED=1
    
    RUN addgroup --system --gid 1001 nodejs
    RUN adduser --system --uid 1001 nextjs
    
    # Copy only the necessary built artifacts from the builder stage
    COPY --from=builder /usr/src/app/apps/frontend/public ./apps/frontend/public/
    
    # Copy the standalone output if using output: 'standalone'
    COPY --from=builder --chown=nextjs:nodejs /usr/src/app/apps/frontend/.next/standalone ./apps/frontend/
    COPY --from=builder --chown=nextjs:nodejs /usr/src/app/apps/frontend/.next/static ./apps/frontend/.next/static/
    
    USER nextjs
    
    EXPOSE 3000
    
    # Set the correct working directory for the standalone output
    WORKDIR /usr/src/app/apps/frontend
    
    CMD ["node", "server.js"]